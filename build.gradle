plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
    id 'war'
}

group = 'com.github.dashframe'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-mail:${project.spring_version}"
//implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
//	implementation "org.hibernate:hibernate-core:6.1.5.Final"
//	implementation "org.hibernate:hibernate-entitymanager:5.6.12.Final"
//implementation "io.jsonwebtoken:jjwt:0.9.1"
    implementation "org.springframework.boot:spring-boot-starter-json:${project.spring_version}"
    implementation "org.springframework.security:spring-security-core:5.7.3"
//	implementation "org.springframework.data:spring-data-jpa:${project.spring_version}"
//	implementation "org.springframework.boot:spring-boot-starter-data-jpa:${project.spring_version}"
    developmentOnly "org.springframework.boot:spring-boot-devtools:${project.spring_version}"
//	runtimeOnly "org.mariadb.jdbc:mariadb-java-client:3.0.8"
    providedRuntime "org.springframework.boot:spring-boot-starter-tomcat:${project.spring_version}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${project.spring_version}"
//testImplementation 'com.h2database:h2:2.1.214'

    // WEB
    implementation "org.springframework.boot:spring-boot-starter-web:${project.spring_version}"
    implementation "org.springframework.boot:spring-boot-starter-websocket:${project.spring_version}"
}

tasks.named('test') {
    useJUnitPlatform()
}

task copyFrontAssets(type: Copy) {
    dependsOn ':front:assemble'
    description "Copies the output of the front build to Spring's static assets directory"
    group 'build'

    from 'front/dist/'
    into 'src/main/resources/static'
}

tasks.named('clean') {
    // remove the copied assets on cleanup
    file('src/main/resources/static').deleteDir()
}

// Always build the front end and copy assets before creating a WAR
tasks.war.dependsOn(copyFrontAssets)

task runDevServer {
    dependsOn bootRun
    description 'Starts the server in development mode'
    group "running"
}

// Gradle Build Scan Publishing
if (hasProperty('buildScan') && System.getenv('GRADLE_TOS_AGREE')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = System.getenv('GRADLE_TOS_AGREE')
    }
}
