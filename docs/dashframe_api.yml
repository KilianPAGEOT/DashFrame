openapi: 3.0.0
info:
  title: DashFrame API
  version: 0.1.0
  description: |
    ## Authentification

    This API uses tokens of an unknown type.
    The token is in the `Authorization` header of the request.  

    Example:
    ```
    Authorization: gho_pJ9dGXVKpfzZp4PUHSxYEq9hjk0h288Gwj4S
    ```

    ## Typical usage:

    Once logged-in, the client will fetch the widgets on the board:
    ```
    GET $API_URL/widgets
    ```

    Then it will listen for widget update events by starting a WebSocket connection:
    ```
    GET $API_URL/ws/events
    ```

    In the meantime, the client will fetch the list of available widget and services:
    ```
    GET $API_URL/services
    ```
servers:
  - url: http://localhost:8080/api/{apiVersion}
    description: Development API Server
    variables:
      apiVersion:
        default: v1
components:
  schemas:
    BaseEvent:
      type: object
      description: Common properties shared by any server-sent event, not a full event by itself
      properties:
        timestamp:
          type: integer
          description: The UNIX timestamp of the event creation
          format: int64
      required:
        - timestamp
    BaseWidgetConfiguration:
      type: object
      properties:
        name:
          description: Optional user-defined name for the widget
          type: string
    ClientInformation:
      type: object
      description: Information about the client that executed this request
      properties:
        name:
          type: string
          description: Indicates the identifier of this parameter
          example: city
        type:
          type: string
          description: Indicates the type of this parameter
          enum: ["string", "integer"]
          example: string
      required:
        - name
        - type
    EpicGamesFreeGamesWidgetConfiguration:
      allOf:
        - $ref: "#/components/schemas/BaseWidgetConfiguration"
        - type: object
          description: Configuration for the Epic Games free games widget
          properties:
            type:
              description: The unique id of this service widget
              enum: ["epic_games/free_games"]
          required:
            - type
    EpicGamesFriendsListWidgetConfiguration:
      allOf:
        - $ref: "#/components/schemas/BaseWidgetConfiguration"
        - type: object
          description: Configuration for the Epic Games friends list widget
          properties:
            type:
              description: The unique id of this service widget
              enum: ["epic_games/friends_list"]
            parameters:
              type: object
              properties:
                showOffline:
                  type: integer
                  enum: [0, 1]
              required:
                - showOffline
          required:
            - type
            - parameters
    Error:
      type: object
      description: An error response object
      example:
        {
          "code": 42069,
          "message": "The requested Steam game 'Half-Life 3' was not found",
          "messageKey": "error.widget.steam.unknown_game",
          "messageParams": { "game": "Half-Life 3" },
        }
      properties:
        code:
          type: integer
          description: The unique error code
        message:
          type: string
          description: The error message in english, not required
        messageKey:
          type: string
          description: The error message localization key, not required
        messageParams:
          type: object
          description: The parameters used in the localization of this error message, assumed to be empty if not present
          additionalProperties:
            type: string
    Event:
      description: Any server-sent event
      oneOf:
        - $ref: "#/components/schemas/WidgetDeletionEvent"
        - $ref: "#/components/schemas/WidgetErrorEvent"
        - $ref: "#/components/schemas/WidgetRefreshEvent"
      discriminator:
        propertyName: type
        mapping:
          widgets/deletion: "#/components/schemas/WidgetDeletionEvent"
          widgets/error: "#/components/schemas/WidgetErrorEvent"
          widgets/refresh: "#/components/schemas/WidgetRefreshEvent"
    Identifier:
      type: integer
      description: A resource identifier
      minimum: 0
    OptionalUserIdentifier:
      type: object
      description: The ID of an user, assumed to be the current user if not specified
      properties:
        userId:
          $ref: "#/components/schemas/Identifier"
    RssFeedWidgetConfiguration:
      allOf:
        - $ref: "#/components/schemas/BaseWidgetConfiguration"
        - type: object
          description: Configuration for the RSS feed widget
          properties:
            type:
              description: The unique id of this service widget
              enum: ["rss/feed"]
            parameters:
              type: object
              properties:
                url:
                  type: string
                  format: uri
              required:
                - url
          required:
            - type
            - parameters
    ServerInformation:
      type: object
      description: Information about the server that is receiving this request
      properties:
        current_time:
          type: number
          example: 1531680780
          format: int64
          description: Indicates the server time in the Epoch Unix Time Stamp format
        services:
          type: array
          description: Indicates the list of Services supported by the server
          items:
            $ref: "#/components/schemas/ServiceDescription"
      required:
        - current_time
        - services
    ServiceDescription:
      type: object
      properties:
        name:
          type: string
          description: Indicates the name of the Service
          example: weather
        iconUrl:
          type: string
          format: uri
          description: The image URL of the service
        description:
          type: string
          description: Describes the service
        widgets:
          type: array
          description: Indicates the list of Widgets supported by this Service
          items:
            $ref: "#/components/schemas/WidgetDescription"
      required:
        - name
        - widgets
    ServiceInstance:
      type: object
      description: A service instance, a user may possess multiple instances (accounts) for any given service
      example:
        {
          "id": 24,
          "type": "steam",
          "username": "Xx_DarkGam3R_xX",
          "token": "c3VwZXIgc2VjcmV0IHRva2VuCg==",
        }
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        type:
          $ref: "#/components/schemas/ServiceType"
        username:
          type: string
          description: An username/email, unique accross service instances of a user
        token:
          type: string
          description: Login token for the service
      required:
        - id
        - type
    ServiceType:
      description: "Service unique identifier"
      enum: ["epic_games", "rss", "steam", "twitch", "weather_time", "youtube"]
    SteamFriendsListWidgetConfiguration:
      allOf:
        - $ref: "#/components/schemas/BaseWidgetConfiguration"
        - type: object
          description: Configuration for the Steam friends list widget
          properties:
            type:
              description: The unique id of this service widget
              enum: ["steam/friends_list"]
            parameters:
              type: object
              properties:
                showOffline:
                  type: integer
                  enum: [0, 1]
              required:
                - showOffline
          required:
            - type
            - parameters
    SteamGameNewsWidgetConfiguration:
      allOf:
        - $ref: "#/components/schemas/BaseWidgetConfiguration"
        - type: object
          description: Configuration for the Steam game news widget
          properties:
            type:
              description: The unique id of this service widget
              enum: ["steam/game_news"]
            parameters:
              type: object
              properties:
                gameNameOrId:
                  type: string
                  minLength: 1
              required:
                - gameNameOrId
          required:
            - type
            - parameters
    SteamGamePopulationWidgetConfiguration:
      allOf:
        - $ref: "#/components/schemas/BaseWidgetConfiguration"
        - type: object
          description: Configuration for the Steam game population widget
          properties:
            type:
              description: The unique id of this service widget
              enum: ["steam/game_population"]
            parameters:
              type: object
              properties:
                gameNameOrId:
                  type: string
                  minLength: 1
              required:
                - gameNameOrId
          required:
            - type
            - parameters
    TwitchFollowedChannelsWidgetConfiguration:
      allOf:
        - $ref: "#/components/schemas/BaseWidgetConfiguration"
        - type: object
          description: Configuration for the Twitch list of followed channels
          properties:
            type:
              description: The unique id of this service widget
              enum: ["twitch/followed_channels"]
            parameters:
              type: object
              properties:
                filter:
                  type: string
                  enum: ["ALL", "STREAMING_ONLY"]
              required:
                - filter
          required:
            - type
            - parameters
    UnknownWidgetConfiguration:
      allOf:
        - $ref: "#/components/schemas/BaseWidgetConfiguration"
        - type: object
          properties:
            type:
              type: string
              description: The unique id of this service widget
            parameters:
              type: object
          required:
            - type
            - parameters
    WeatherTimeWidgetConfiguration:
      allOf:
        - $ref: "#/components/schemas/BaseWidgetConfiguration"
        - type: object
          description: Configuration for the weather & time widget
          properties:
            type:
              description: The unique id of this service widget
              enum: ["weather_time/default"]
            parameters:
              type: object
              properties:
                location:
                  description: City name or address
                  type: string
              required:
                - location
          required:
            - type
            - parameters
    WidgetConfiguration:
      oneOf:
        - $ref: "#/components/schemas/EpicGamesFreeGamesWidgetConfiguration"
        - $ref: "#/components/schemas/EpicGamesFriendsListWidgetConfiguration"
        - $ref: "#/components/schemas/RssFeedWidgetConfiguration"
        - $ref: "#/components/schemas/SteamFriendsListWidgetConfiguration"
        - $ref: "#/components/schemas/SteamGameNewsWidgetConfiguration"
        - $ref: "#/components/schemas/SteamGamePopulationWidgetConfiguration"
        - $ref: "#/components/schemas/TwitchFollowedChannelsWidgetConfiguration"
        - $ref: "#/components/schemas/WeatherTimeWidgetConfiguration"
        - $ref: "#/components/schemas/YouTubeChannelStatisticsWidgetConfiguration"
        - $ref: "#/components/schemas/YouTubeSubscribedChannelsWidgetConfiguration"
        - $ref: "#/components/schemas/YouTubeVideoStatisticsWidgetConfiguration"
      discriminator:
        propertyName: type
        mapping:
          steam/friends_list: "#/components/schemas/SteamFriendsListWidgetConfiguration"
          steam/game_news: "#/components/schemas/SteamGameNewsWidgetConfiguration"
          steam/game_population: "#/components/schemas/SteamGamePopulationWidgetConfiguration"
    WidgetDeletionEvent:
      example:
        {
          "type": "widgets/deletion",
          "timestamp": 1667445637,
          "data": { widgetIds: [4, 42, 23] },
        }
      allOf:
        - $ref: "#/components/schemas/BaseEvent"
        - type: object
          description: Forces a widget to be delete if it still exists on the client side
          properties:
            type:
              enum: ["widgets/deletion"]
              description: The unique ID of this event
            data:
              type: object
              description: Event data
              properties:
                widgetIds:
                  type: array
                  description: The IDs of the widgets to be deleted
                  items:
                    $ref: "#/components/schemas/Identifier"
              required:
                - widgetIds
          required:
            - type
            - data
    WidgetDescription:
      type: object
      properties:
        name:
          type: string
          description: Indicates the identifier of this Widget
          example: city_temperature
        description:
          type: string
          example: Display temperature for a city
        params:
          type: array
          description: Indicates the list of parameters to configure this Widget
          items:
            $ref: "#/components/schemas/WidgetParameterDescription"
      required:
        - name
        - description
        - params
    WidgetErrorEvent:
      allOf:
        - $ref: "#/components/schemas/BaseEvent"
        - type: object
          description: Widget error event
          properties:
            type:
              enum: ["widgets/error"]
              description: The unique ID of this event
            data:
              type: object
              description: Event data
              properties:
                widgets:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        $ref: "#/components/schemas/Identifier"
                      error:
                        $ref: "#/components/schemas/Error"
                    required:
                      - id
                      - error
              required:
                - widgets
          required:
            - type
            - data
    WidgetInstance:
      type: object
      example:
        {
          "id": 42,
          "service_id": 1,
          "order": 3,
          "column_pos": 1,
          "config":
            {
              "type": "steam/friends_list",
              "parameters": { "showOffline": 1 },
            },
        }
      properties:
        id:
          $ref: "#/components/schemas/Identifier"
        name:
          description: User-defined name of this widget component, optional
          type: string
        serviceId:
          $ref: "#/components/schemas/Identifier"
        order:
          type: integer
          description: The ordering of this widget in the column
          minimum: 0
        columnPos:
          type: integer
          description: The column id of the widget
          minimum: 0
        config:
          $ref: "#/components/schemas/WidgetConfiguration"
      required:
        - id
        - service_id
        - order
        - column_pos
    WidgetParameterDescription:
      type: object
      description: Describes a widget parameter
      properties:
        name:
          type: string
          description: Indicates the identifier of this parameter
          example: city
        type:
          type: string
          description: Indicates the type of this parameter
          enum: ["string", "integer"]
          example: string
      required:
        - name
        - type
    WidgetRefreshEvent:
      allOf:
        - $ref: "#/components/schemas/BaseEvent"
        - type: object
          description: Widget data update event
          properties:
            type:
              enum: ["widgets/refresh"]
              description: The unique ID of this event
            data:
              type: object
              description: Event data
              properties:
                widgets:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        $ref: "#/components/schemas/Identifier"
                      data:
                        type: object
                        description: Widget-specific data
                    required:
                      - id
                      - data
              required:
                - widgets
          required:
            - type
            - data
    WidgetType:
      type: string
      enum:
        - steam/friends_list
        - steam/game_news
        - steam/game_population
    YouTubeChannelStatisticsWidgetConfiguration:
      allOf:
        - $ref: "#/components/schemas/BaseWidgetConfiguration"
        - type: object
          description: Configuration for the YouTube channel stats widget
          properties:
            type:
              description: The unique id of this service widget
              enum: ["youtube/channel_statistics"]
            parameters:
              type: object
              properties:
                channel:
                  type: string
                  minLength: 1
              required:
                - channel
          required:
            - type
            - parameters
    YouTubeSubscribedChannelsWidgetConfiguration:
      allOf:
        - $ref: "#/components/schemas/BaseWidgetConfiguration"
        - type: object
          description: Configuration for the YouTube list of subscribed channels
          properties:
            type:
              description: The unique id of this service widget
              enum: ["youtube/subsribed_channels"]
            parameters:
              type: object
              properties:
                filter:
                  type: string
                  enum: ["ALL", "STREAMING_ONLY"]
              required:
                - filter
          required:
            - type
            - parameters
    YouTubeVideoStatisticsWidgetConfiguration:
      allOf:
        - $ref: "#/components/schemas/BaseWidgetConfiguration"
        - type: object
          description: Configuration for the YouTube video statistics
          properties:
            type:
              description: The unique id of this service widget
              enum: ["youtube/video_statistics"]
            parameters:
              type: object
              properties:
                video:
                  type: string
              required:
                - video
          required:
            - type
            - parameters
  responses:
    badRequest:
      description: Returned if the requested was malformed
      content:
        application/json:
          schema:
            type: object
            example:
              {
                "error":
                  {
                    "code": 3,
                    "message": 'Missing string parameter "config"."name"',
                    "messageKey": "error.missing_parameter",
                    "messageParameters":
                      { "path": '"config"."name"', "type": "string" },
                  },
              }
            properties:
              error:
                $ref: "#/components/schemas/Error"
    notFound:
      description: Returned if the requested resource doesn't exist, or the user does not have access
      content:
        application/json:
          schema:
            type: object
            example:
              {
                "error":
                  {
                    "code": 2,
                    "message": "Not found: /widgets/42",
                    "messageKey": "error.not_found",
                    "messageParameters": { "url": "/widgets/42" },
                  },
              }
            properties:
              error:
                $ref: "#/components/schemas/Error"
    notLoggedIn:
      description: The user is not logged in
      content:
        application/json:
          schema:
            type: object
            example:
              {
                "error":
                  {
                    "code": 1,
                    "message": "Not logged in",
                    "messageKey": "error.not_logged",
                  },
              }
            properties:
              error:
                $ref: "#/components/schemas/Error"
  parameters:
    optionalUserId:
      name: userId
      in: query
      required: false
      description: The ID of an user, assumed to be the current user if not specified
      schema:
        $ref: "#/components/schemas/Identifier"
    widgetId:
      name: widgetId
      in: path
      required: true
      description: "The ID of a widget"
      schema:
        $ref: "#/components/schemas/Identifier"
  securitySchemes:
    apiKey:
      name: Authorization
      description: Authentification via API key
      type: apiKey
      in: header

tags:
  - name: widgets
    description: Board widgets
  - name: services
    description: External services that provides board widgets
  - name: events
    description: Server-sent events

paths:
  /about.json:
    servers:
      - url: http://localhost:8080
        description: Development Server
    get:
      summary: Information about the supported services
      security: [] # public
      tags:
        - services
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  client:
                    $ref: "#/components/schemas/ClientInformation"
                  server:
                    $ref: "#/components/schemas/ServerInformation"
                required:
                  - client
                  - server
  /services:
    get:
      summary: Returns the list of available services and services instances registered by the user
      security:
        - "apiKey": []
      tags:
        - services
      parameters:
        - $ref: "#/components/parameters/optionalUserId"
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: array
                    description: Indicates the list of Services supported by the server
                    items:
                      $ref: "#/components/schemas/ServiceDescription"
                  instances:
                    type: array
                    items:
                      $ref: "#/components/schemas/ServiceInstance"
                required:
                  - available
                  - instances
        "401":
          $ref: "#/components/responses/notLoggedIn"
        "404":
          $ref: "#/components/responses/notFound"
    post:
      summary: Create a new service instance
      security:
        - "apiKey": []
      tags:
        - services
      requestBody:
        content:
          application/json:
            example:
              {
                "type": "steam",
                "token": "c3VwZXIgc2VjcmV0IHRva2VuCg==",
                "username": "Xx_DarkGam3R_xX",
              }
            schema:
              type: object
              allOf:
                - $ref: "#/components/schemas/OptionalUserIdentifier"
                - type: object
                  properties:
                    type:
                      $ref: "#/components/schemas/ServiceType"
                    token:
                      type: string
                      description: The token returned by the external service, optional if not needed
                    username:
                      type: string
                      description: A string that identifies this specific account, not needed if the services does not have accounts
                  required:
                    - type
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceInstance"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/notLoggedIn"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      summary: Removes all registered service instances of the user
      security:
        - "apiKey": []
      tags:
        - services
      parameters:
        - $ref: "#/components/parameters/optionalUserId"
      responses:
        "204":
          description: All services were deleted successfully
        "401":
          $ref: "#/components/responses/notLoggedIn"
        "404":
          $ref: "#/components/responses/notFound"
  /services/{serviceIdOrType}:
    delete:
      summary: "If parameter is a service type, removes all instances of this type. If parmeter is an id, remove this instance"
      security:
        - "apiKey": []
      tags:
        - services
      parameters:
        - name: serviceIdOrType
          required: true
          in: path
          schema:
            oneOf:
              - $ref: "#/components/schemas/Identifier"
              - $ref: "#/components/schemas/ServiceType"
      responses:
        "204":
          description: All services of type or service was deleted successfully
        "401":
          $ref: "#/components/responses/notLoggedIn"
        "404":
          $ref: "#/components/responses/notFound"
  /widgets:
    get:
      summary: Returns the layout of the requested user's board
      security:
        - "apiKey": []
      tags:
        - widgets
      parameters:
        - $ref: "#/components/parameters/optionalUserId"
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WidgetInstance"
        "401":
          $ref: "#/components/responses/notLoggedIn"
        "404":
          $ref: "#/components/responses/notFound"
    post:
      summary: Create a new widget instance in the given user's board
      security:
        - "apiKey": []
      tags:
        - widgets
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/OptionalUserIdentifier"
                - type: object
                  properties:
                    serviceId:
                      $ref: "#/components/schemas/Identifier"
                    config:
                      $ref: "#/components/schemas/WidgetConfiguration"
                  required:
                    - serviceId
                    - config
      responses:
        "201":
          description: Widget was created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WidgetInstance"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/notLoggedIn"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      summary: Clear all the widgets in the user's board
      security:
        - "apiKey": []
      tags:
        - widgets
      parameters:
        - $ref: "#/components/parameters/optionalUserId"
      responses:
        "204":
          description: Board was cleared successfully
        "401":
          $ref: "#/components/responses/notLoggedIn"
        "404":
          $ref: "#/components/responses/notFound"
  /widgets/{widgetId}:
    get:
      summary: Get information about a specific widget
      security:
        - "apiKey": []
      tags:
        - widgets
      parameters:
        - $ref: "#/components/parameters/widgetId"
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WidgetInstance"
        "401":
          $ref: "#/components/responses/notLoggedIn"
        "404":
          $ref: "#/components/responses/notFound"
    patch:
      summary: Update an existing widget's configuration
      security:
        - "apiKey": []
      tags:
        - widgets
      parameters:
        - $ref: "#/components/parameters/widgetId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                config:
                  $ref: "#/components/schemas/WidgetConfiguration"
              required:
                - config
      responses:
        "204":
          description: The widget was updated successfully
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/notLoggedIn"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      summary: Delete a widget
      security:
        - "apiKey": []
      tags:
        - widgets
      parameters:
        - $ref: "#/components/parameters/widgetId"
      responses:
        "204":
          description: The widget was deleted successfully
        "401":
          $ref: "#/components/responses/notLoggedIn"
        "404":
          $ref: "#/components/responses/notFound"
  /ws/events:
    get:
      summary: Subscribes to the events WebSocket of the given user, or the current user if not present
      security:
        - "apiKey": []
      tags:
        - events
      parameters:
        - $ref: "#/components/parameters/optionalUserId"
        - name: Upgrade
          in: header
          schema:
            type: string
        - name: Sec-WebSocket-Key
          in: header
          schema:
            type: string
        - name: Sec-WebSocket-Protocol
          in: header
          schema:
            type: string
        - name: Sec-WebSocket-Version
          in: header
          schema:
            type: string
      responses:
        "101":
          description: Switching protocols (to WebSocket protocol)
        "401":
          $ref: "#/components/responses/notLoggedIn"
        "404":
          $ref: "#/components/responses/notFound"
