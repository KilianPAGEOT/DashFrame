/* tslint:disable */
/* eslint-disable */
/**
 * DashFrame API
 * ## Authentication  This API uses tokens of an unknown type. The token is in the `Authorization` header of the request.    Example: ``` Authorization: gho_pJ9dGXVKpfzZp4PUHSxYEq9hjk0h288Gwj4S ```  ## Typical usage:  Once logged-in, the client will fetch the widgets on the board: ``` GET $API_URL/widgets ```  Then it will listen for widget update events by starting a WebSocket connection: ``` GET $API_URL/ws/events ```  In the meantime, the client will fetch the list of available widget and services: ``` GET $API_URL/services ```
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CreateUserAndSendEmailRequest,
  UserInstance,
  WrappedApiError,
} from "../models";

export interface CreateUserAndSendEmailOperationRequest {
  createUserAndSendEmailRequest?: CreateUserAndSendEmailRequest;
}

export interface VerifyTheUserRequest {
  emailVerificationToken: string;
}

/**
 *
 */
export class AuthenticationApi extends runtime.BaseAPI {
  /**
   * Generate a new token for the user authenticated with the header info
   */
  async createTokenRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    const response = await this.request(
      {
        path: `/login`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * Generate a new token for the user authenticated with the header info
   */
  async createToken(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.createTokenRaw(initOverrides);
    return await response.value();
  }

  /**
   * Create a new user instance and send him a verification e-mail
   */
  async createUserAndSendEmailRaw(
    requestParameters: CreateUserAndSendEmailOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserInstance>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/register`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createUserAndSendEmailRequest,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Create a new user instance and send him a verification e-mail
   */
  async createUserAndSendEmail(
    requestParameters: CreateUserAndSendEmailOperationRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserInstance> {
    const response = await this.createUserAndSendEmailRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Create user with OAuth login and add OAuth token to cookie
   */
  async createUserOauth2Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/users-oauth2`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create user with OAuth login and add OAuth token to cookie
   */
  async createUserOauth2(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.createUserOauth2Raw(initOverrides);
  }

  /**
   * Verify the user with the token passed as URL parameter
   */
  async verifyTheUserRaw(
    requestParameters: VerifyTheUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.emailVerificationToken === null ||
      requestParameters.emailVerificationToken === undefined
    ) {
      throw new runtime.RequiredError(
        "emailVerificationToken",
        "Required parameter requestParameters.emailVerificationToken was null or undefined when calling verifyTheUser."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.emailVerificationToken !== undefined) {
      queryParameters["emailVerificationToken"] =
        requestParameters.emailVerificationToken;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/email-verifier`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   * Verify the user with the token passed as URL parameter
   */
  async verifyTheUser(
    requestParameters: VerifyTheUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.verifyTheUserRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
