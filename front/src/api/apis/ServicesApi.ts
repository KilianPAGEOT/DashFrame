/* tslint:disable */
/* eslint-disable */
/**
 * DashFrame API
 * ## Authentication  This API uses tokens of an unknown type. The token is in the `Authorization` header of the request.    Example: ``` Authorization: gho_pJ9dGXVKpfzZp4PUHSxYEq9hjk0h288Gwj4S ```  ## Typical usage:  Once logged-in, the client will fetch the widgets on the board: ``` GET $API_URL/widgets ```  Then it will listen for widget update events by starting a WebSocket connection: ``` GET $API_URL/ws/events ```  In the meantime, the client will fetch the list of available widget and services: ``` GET $API_URL/services ```
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CreateServiceRequest,
  CreateToken400Response,
  CreateToken401Response,
  CreateUser404Response,
  ListServices200Response,
  ServiceInstance,
} from "../models";

export interface CreateServiceOperationRequest {
  createServiceRequest?: CreateServiceRequest;
}

export interface DeleteServiceRequest {
  serviceId: number;
}

export interface DeleteServicesRequest {
  userId?: number;
}

export interface ListServicesRequest {
  userId?: number;
}

/**
 *
 */
export class ServicesApi extends runtime.BaseAPI {
  /**
   * Create a new service instance
   */
  async createServiceRaw(
    requestParameters: CreateServiceOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ServiceInstance>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKey", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/services`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createServiceRequest,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Create a new service instance
   */
  async createService(
    requestParameters: CreateServiceOperationRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ServiceInstance> {
    const response = await this.createServiceRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Delete a specific service instance
   */
  async deleteServiceRaw(
    requestParameters: DeleteServiceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.serviceId === null ||
      requestParameters.serviceId === undefined
    ) {
      throw new runtime.RequiredError(
        "serviceId",
        "Required parameter requestParameters.serviceId was null or undefined when calling deleteService."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKey", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/services/{serviceId}`.replace(
          `{${"serviceId"}}`,
          encodeURIComponent(String(requestParameters.serviceId))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a specific service instance
   */
  async deleteService(
    requestParameters: DeleteServiceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteServiceRaw(requestParameters, initOverrides);
  }

  /**
   * Removes all registered service instances of the user
   */
  async deleteServicesRaw(
    requestParameters: DeleteServicesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.userId !== undefined) {
      queryParameters["userId"] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKey", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/services`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Removes all registered service instances of the user
   */
  async deleteServices(
    requestParameters: DeleteServicesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteServicesRaw(requestParameters, initOverrides);
  }

  /**
   * Returns the list of available services and services instances registered by the user
   */
  async listServicesRaw(
    requestParameters: ListServicesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ListServices200Response>> {
    const queryParameters: any = {};

    if (requestParameters.userId !== undefined) {
      queryParameters["userId"] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKey", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/services`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Returns the list of available services and services instances registered by the user
   */
  async listServices(
    requestParameters: ListServicesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ListServices200Response> {
    const response = await this.listServicesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
