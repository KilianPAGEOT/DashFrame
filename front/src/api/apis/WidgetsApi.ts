/* tslint:disable */
/* eslint-disable */
/**
 * DashFrame API
 * ## Authentication  This API uses tokens of an unknown type. The token is in the `Authorization` header of the request.    Example: ``` Authorization: gho_pJ9dGXVKpfzZp4PUHSxYEq9hjk0h288Gwj4S ```  ## Typical usage:  Once logged-in, the client will fetch the widgets on the board: ``` GET $API_URL/widgets ```  Then it will listen for widget update events by starting a WebSocket connection: ``` GET $API_URL/ws/events ```  In the meantime, the client will fetch the list of available widget and services: ``` GET $API_URL/services ```
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CreateWidgetRequest,
  UpdateWidgetRequest,
  WidgetInstance,
  WrappedApiError,
} from "../models";

export interface CreateWidgetOperationRequest {
  createWidgetRequest?: CreateWidgetRequest;
}

export interface DeleteWidgetRequest {
  widgetId: number;
}

export interface DeleteWidgetsRequest {
  userId?: number;
}

export interface GetWidgetRequest {
  widgetId: number;
}

export interface ListWidgetsRequest {
  userId?: number;
}

export interface UpdateWidgetOperationRequest {
  widgetId: number;
  updateWidgetRequest?: UpdateWidgetRequest;
}

/**
 *
 */
export class WidgetsApi extends runtime.BaseAPI {
  /**
   * Create a new widget instance in the given user\'s board
   */
  async createWidgetRaw(
    requestParameters: CreateWidgetOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<WidgetInstance>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKey", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/widgets`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createWidgetRequest,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Create a new widget instance in the given user\'s board
   */
  async createWidget(
    requestParameters: CreateWidgetOperationRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<WidgetInstance> {
    const response = await this.createWidgetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Delete a widget
   */
  async deleteWidgetRaw(
    requestParameters: DeleteWidgetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.widgetId === null ||
      requestParameters.widgetId === undefined
    ) {
      throw new runtime.RequiredError(
        "widgetId",
        "Required parameter requestParameters.widgetId was null or undefined when calling deleteWidget."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKey", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/widgets/{widgetId}`.replace(
          `{${"widgetId"}}`,
          encodeURIComponent(String(requestParameters.widgetId))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a widget
   */
  async deleteWidget(
    requestParameters: DeleteWidgetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteWidgetRaw(requestParameters, initOverrides);
  }

  /**
   * Clear all the widgets in the user\'s board
   */
  async deleteWidgetsRaw(
    requestParameters: DeleteWidgetsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.userId !== undefined) {
      queryParameters["userId"] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKey", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/widgets`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Clear all the widgets in the user\'s board
   */
  async deleteWidgets(
    requestParameters: DeleteWidgetsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteWidgetsRaw(requestParameters, initOverrides);
  }

  /**
   * Get information about a specific widget
   */
  async getWidgetRaw(
    requestParameters: GetWidgetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<WidgetInstance>> {
    if (
      requestParameters.widgetId === null ||
      requestParameters.widgetId === undefined
    ) {
      throw new runtime.RequiredError(
        "widgetId",
        "Required parameter requestParameters.widgetId was null or undefined when calling getWidget."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKey", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/widgets/{widgetId}`.replace(
          `{${"widgetId"}}`,
          encodeURIComponent(String(requestParameters.widgetId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Get information about a specific widget
   */
  async getWidget(
    requestParameters: GetWidgetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<WidgetInstance> {
    const response = await this.getWidgetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Returns the layout of the requested user\'s board
   */
  async listWidgetsRaw(
    requestParameters: ListWidgetsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<WidgetInstance>>> {
    const queryParameters: any = {};

    if (requestParameters.userId !== undefined) {
      queryParameters["userId"] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKey", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/widgets`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Returns the layout of the requested user\'s board
   */
  async listWidgets(
    requestParameters: ListWidgetsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<WidgetInstance>> {
    const response = await this.listWidgetsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Update an existing widget\'s configuration
   */
  async updateWidgetRaw(
    requestParameters: UpdateWidgetOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.widgetId === null ||
      requestParameters.widgetId === undefined
    ) {
      throw new runtime.RequiredError(
        "widgetId",
        "Required parameter requestParameters.widgetId was null or undefined when calling updateWidget."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKey", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/widgets/{widgetId}`.replace(
          `{${"widgetId"}}`,
          encodeURIComponent(String(requestParameters.widgetId))
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.updateWidgetRequest,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update an existing widget\'s configuration
   */
  async updateWidget(
    requestParameters: UpdateWidgetOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateWidgetRaw(requestParameters, initOverrides);
  }
}
